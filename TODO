# $Id$
# vi:ts=4:et

If you want to hack on pycurl, here's our list of unresolved issues:


NEW FEATURES/IMPROVEMENTS:

    * Add new 3rdparty ftp transfer options from libcurl.

    * HTTPPOST should take a dict instead of a list of tuples, this way it
      would have the same interface as POSTFIELDS.

    * Support more of the CURLFORM_* API in HTTPPOST?

    * Add docs to the high-level interface.

    * Add more options to the undocumented and currently mostly useless
      Curl.unsetopt() method. Have to carefully check the libcurl source
      code for each option we want to support.

    * Using certain invalid options, it may be possible to cause a crash (e.g.
      setting a too large POSTFIELDSIZE).  This is un-Pythonic behaviour, but
      you somewhere have to draw a line between efficiency (and feature
      completeness) and safety.  There _are_ quite a number of internal
      error checks, but tracking and catching all possible (deliberate) misuses
      is not a goal (and probably impossible anyway, due to the complexity
      of libcurl).
      [ In the POSTFIELDS case, the Python way would be to simply not expose
        the POSTFIELDSIZE option and require string slicing instead. ]

